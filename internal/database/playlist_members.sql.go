// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: playlist_members.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addPlaylistMember = `-- name: AddPlaylistMember :exec
INSERT INTO playlist_members (user_uuid, playlist_uuid, role, joined_at, updated_at)
VALUES ($1, $2, $3, now(), now())
`

type AddPlaylistMemberParams struct {
	UserUuid     uuid.UUID `json:"user_uuid"`
	PlaylistUuid uuid.UUID `json:"playlist_uuid"`
	Role         string    `json:"role"`
}

func (q *Queries) AddPlaylistMember(ctx context.Context, arg AddPlaylistMemberParams) error {
	_, err := q.db.Exec(ctx, addPlaylistMember, arg.UserUuid, arg.PlaylistUuid, arg.Role)
	return err
}

const getPlaylistMember = `-- name: GetPlaylistMember :one
SELECT user_uuid, playlist_uuid, role, joined_at, updated_at
FROM playlist_members
WHERE user_uuid = $1 AND playlist_uuid = $2
`

type GetPlaylistMemberParams struct {
	UserUuid     uuid.UUID `json:"user_uuid"`
	PlaylistUuid uuid.UUID `json:"playlist_uuid"`
}

func (q *Queries) GetPlaylistMember(ctx context.Context, arg GetPlaylistMemberParams) (PlaylistMember, error) {
	row := q.db.QueryRow(ctx, getPlaylistMember, arg.UserUuid, arg.PlaylistUuid)
	var i PlaylistMember
	err := row.Scan(
		&i.UserUuid,
		&i.PlaylistUuid,
		&i.Role,
		&i.JoinedAt,
		&i.UpdatedAt,
	)
	return i, err
}
