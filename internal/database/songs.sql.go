// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: songs.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addSong = `-- name: AddSong :one
INSERT INTO songs (song_uri, playlist_uuid)
VALUES ($1, $2)
ON CONFLICT ON CONSTRAINT songs_pk
DO UPDATE SET "count" = songs."count" + 1
RETURNING song_uri, playlist_uuid, "count"
`

type AddSongParams struct {
	SongUri      string    `json:"song_uri"`
	PlaylistUuid uuid.UUID `json:"playlist_uuid"`
}

func (q *Queries) AddSong(ctx context.Context, arg AddSongParams) (Song, error) {
	row := q.db.QueryRow(ctx, addSong, arg.SongUri, arg.PlaylistUuid)
	var i Song
	err := row.Scan(&i.SongUri, &i.PlaylistUuid, &i.Count)
	return i, err
}

const addSongToPlaylist = `-- name: AddSongToPlaylist :exec
UPDATE songs
SET count = count - 1
WHERE song_uri = $1 and playlist_uuid = $2
`

type AddSongToPlaylistParams struct {
	SongUri      string    `json:"song_uri"`
	PlaylistUuid uuid.UUID `json:"playlist_uuid"`
}

func (q *Queries) AddSongToPlaylist(ctx context.Context, arg AddSongToPlaylistParams) error {
	_, err := q.db.Exec(ctx, addSongToPlaylist, arg.SongUri, arg.PlaylistUuid)
	return err
}

const blacklistSong = `-- name: BlacklistSong :execrows
UPDATE songs
SET count = -1
WHERE song_uri = $1 AND playlist_uuid = $2
RETURNING song_uri, playlist_uuid, count
`

type BlacklistSongParams struct {
	SongUri      string    `json:"song_uri"`
	PlaylistUuid uuid.UUID `json:"playlist_uuid"`
}

func (q *Queries) BlacklistSong(ctx context.Context, arg BlacklistSongParams) (int64, error) {
	result, err := q.db.Exec(ctx, blacklistSong, arg.SongUri, arg.PlaylistUuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteBlacklist = `-- name: DeleteBlacklist :execrows
DELETE FROM songs
WHERE song_uri = $1 AND playlist_uuid = $2 and count = -1
`

type DeleteBlacklistParams struct {
	SongUri      string    `json:"song_uri"`
	PlaylistUuid uuid.UUID `json:"playlist_uuid"`
}

func (q *Queries) DeleteBlacklist(ctx context.Context, arg DeleteBlacklistParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteBlacklist, arg.SongUri, arg.PlaylistUuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteSong = `-- name: DeleteSong :exec
DELETE FROM songs
WHERE song_uri = $1 AND playlist_uuid = $2
`

type DeleteSongParams struct {
	SongUri      string    `json:"song_uri"`
	PlaylistUuid uuid.UUID `json:"playlist_uuid"`
}

func (q *Queries) DeleteSong(ctx context.Context, arg DeleteSongParams) error {
	_, err := q.db.Exec(ctx, deleteSong, arg.SongUri, arg.PlaylistUuid)
	return err
}

const getAllBlacklisted = `-- name: GetAllBlacklisted :many
SELECT song_uri, playlist_uuid, count
FROM songs
WHERE playlist_uuid = $1 AND count = -1
`

func (q *Queries) GetAllBlacklisted(ctx context.Context, playlistUuid uuid.UUID) ([]Song, error) {
	rows, err := q.db.Query(ctx, getAllBlacklisted, playlistUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Song
	for rows.Next() {
		var i Song
		if err := rows.Scan(&i.SongUri, &i.PlaylistUuid, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSongs = `-- name: GetAllSongs :many
SELECT song_uri, playlist_uuid, count 
FROM songs
WHERE playlist_uuid = $1 AND count > 0
`

func (q *Queries) GetAllSongs(ctx context.Context, playlistUuid uuid.UUID) ([]Song, error) {
	rows, err := q.db.Query(ctx, getAllSongs, playlistUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Song
	for rows.Next() {
		var i Song
		if err := rows.Scan(&i.SongUri, &i.PlaylistUuid, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
